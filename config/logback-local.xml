<configuration scan="true" scanPeriod="60 seconds">
    <property name="appName" value="HC.OTT.PVS"/>
<!--property resource="META-INF/build-info.properties" --> <!--  DO NOT REMOVE THIS LINE. FOR Logging Build.Version Info  -->
    <property name="productVersion" value="${build.version}"/>
    <property name="WARN_LOG_PATH" value="${LOG_PATH}/warn"/>
    <property name="ERROR_LOG_PATH" value="${LOG_PATH}/error"/>

    <appender name="roll-by-time-all" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOG_PATH}/${appName}.log</File>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${appName},${productVersion},%d{yyyy-MM-dd HH:mm:ss.SSS},%p,[%F:%L],thread[%t],[%X{transactionId}],[%X{clientIp}],%X{history}%m%X{processingTimeMSec}%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${appName}.log.%d{yyyy-MM-dd}</fileNamePattern>
        </rollingPolicy>
    </appender>

    <appender name="roll-by-time-warn" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${appName},${productVersion},%d{yyyy-MM-dd HH:mm:ss.SSS},%p,[%F:%L],thread[%t],[%X{transactionId}],[%X{clientIp}],%X{history}%m%X{processingTimeMSec}%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${WARN_LOG_PATH}/WARN_%d{yyyyMMdd}.log</fileNamePattern>
        </rollingPolicy>
    </appender>

    <appender name="roll-by-time-error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${appName},${productVersion},%d{yyyy-MM-dd HH:mm:ss.SSS},%p,[%F:%L],thread[%t],[%X{transactionId}],[%X{clientIp}],%X{history}%m%X{processingTimeMSec}%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${ERROR_LOG_PATH}/ERROR_%d{yyyyMMdd}.log</fileNamePattern>
        </rollingPolicy>
    </appender>


    <!-- console appender -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${appName},${productVersion},%d{yyyy-MM-dd HH:mm:ss.SSS},%p,[%F:%L],thread[%t],[%X{transactionId}],[%X{clientIp}],%X{history}%X{processingTimeMSec}%m%n</pattern>
        </encoder>
    </appender>


<!--    <logger name="TraceLogging" level="INFO" additivity="false">-->
<!--        <appender-ref ref="TRACE_FILE"/>-->
<!--    </logger>-->
    <logger name="com.danga" level="ERROR"/>
    <logger name="org.apache" level="WARN" />
    <logger name="httpclient" level="WARN" />
    <logger name="org.springframework.web.servlet" level="INFO"/>
    <logger name="org.springframework.web.context" level="INFO"/>

    <!-- log4jdbc 옵션 설정 -->
    <logger name="jdbc" level="ON"/>
    <!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
    <logger name="jdbc.connection" level="OFF"/>
    <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
    <logger name="jdbc.sqlonly" level="ON"/>
    <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
    <logger name="jdbc.sqltiming" level="DEBUG"/>
    <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
    <logger name="jdbc.audit" level="OFF"/>
    <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
    <logger name="jdbc.resultset" level="OFF"/>
    <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
    <logger name="jdbc.resultsettable" level="OFF"/>

    <logger name="log4jdbc.log4j2" level="info" additivity="false">
        <appender-ref ref="roll-by-time-all"/>
        <appender-ref ref="roll-by-time-warn"/>
        <appender-ref ref="roll-by-time-error"/>
        <appender-ref ref="stdout"/>
    </logger>

    <root level="INFO">
        <appender-ref ref="roll-by-time-all"/>
        <appender-ref ref="roll-by-time-warn"/>
        <appender-ref ref="roll-by-time-error"/>
        <appender-ref ref="stdout"/>
    </root>

</configuration>
